[{"C:\\Users\\Edward Potapov\\Documents\\GitHub\\shotgun-game\\src\\App.js":"1"},{"size":7317,"mtime":1626396415992,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"10sldde","C:\\Users\\Edward Potapov\\Documents\\GitHub\\shotgun-game\\src\\App.js",["7","8","9","10","11","12"],"import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nexport default function App() {\r\n    return <Gamepad/>;\r\n    /*if (!isGamepad) {\r\n        return <HomePage/>;\r\n    } else {\r\n        return <Gamepad/>;\r\n    }*/\r\n}\r\n  \r\nfunction HomePage() {\r\n    //const [isGamepad, setGamepad] = useState(false);\r\n    //if(isGamepad) \r\n    //    return <Gamepad/>;\r\n    return (\r\n        <div className='Container'>\r\n            <section className=\"intro\">\r\n            <h1>/shotgun-game</h1>\r\n            <div className=\"buttonholder\">\r\n                <button type=\"button\" onClick={(e) => {\r\n                    //setGamepad(true);\r\n                }}>join game</button>\r\n            </div>\r\n            <p>\r\n                This is shotgun-game. This is based on the rock, paper,\r\n                scissors <a href=\"https://www.wikihow.com/Play-the-Shotgun-Game\" target=\"_blank\" rel=\"noreferrer\">style game</a>. \r\n                You will be able to play this with a friend or by yourself. \r\n            </p>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Gamepad() { \r\n    const gameid = 67900;\r\n    const ButtonStyle = {backgroundColor: \"#464545\", borderColor:\"#353434\"};\r\n    const ButtonStyleEnd = {backgroundColor: \"#464545\", borderColor:\"#353434\", pointerEvents:\"none\"};\r\n    const NewButtonStyle = {backgroundColor: \"#353434\", borderColor:\"white\", pointerEvents:\"none\"};\r\n    const [engageGame, startGame] = useState(false);\r\n    const [sheildStyle, changeB1] = useState(ButtonStyle);\r\n    const [hitStyle, changeB2] = useState(ButtonStyle);\r\n    const [reloadStyle, changeB3] = useState(ButtonStyle);\r\n    const [gameDisplay, changeDis] = useState(5);\r\n    let GameMove = 0;\r\n\r\n    function TimedDisplay (x) {\r\n        switch(x) {\r\n            case 1:\r\n                return new Promise(resolve => {\r\n                    changeDis(\"Nothing Happened\");\r\n                    setTimeout(resolve, 2000);\r\n                });\r\n            case 2:\r\n                return new Promise(resolve => {\r\n                    changeDis(\"You won\");\r\n                    setTimeout(resolve, 2000);\r\n                });    \r\n            case 3:\r\n                return new Promise(resolve => {\r\n                    changeDis(\"You Lost\");\r\n                    setTimeout(resolve, 2000);\r\n                });   \r\n            case 4:\r\n                return new Promise(resolve => {\r\n                    changeDis(\"You didn't do anything\");\r\n                    setTimeout(resolve, 2000);\r\n                });   \r\n            case 5:\r\n                return new Promise(resolve => {\r\n                    var timeleft = 5\r\n                    changeDis(timeleft);\r\n                    var fiveSec = setInterval(() => {\r\n                        console.log(timeleft);\r\n                        timeleft--;\r\n                        if(timeleft < 2) {\r\n                            clearInterval(fiveSec);\r\n                            resolve();\r\n                        }\r\n                        changeDis((prevSec)=>{return prevSec-1;});\r\n                    }, 1000);\r\n                }); \r\n        }\r\n    }\r\n\r\n    function sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    const reEnable = () => {\r\n        changeB1(ButtonStyle);\r\n        changeB2(ButtonStyle);\r\n        changeB3(ButtonStyle);\r\n        GameMove = 0;\r\n    }\r\n\r\n    const disable = () => {\r\n        changeB1(ButtonStyleEnd);\r\n        changeB2(ButtonStyleEnd);\r\n        changeB3(ButtonStyleEnd);\r\n    }\r\n\r\n    const ai = () => {\r\n        let i = Math.random(8);\r\n    }\r\n\r\n    const Gameplay = async () => {\r\n        while(true) {\r\n            reEnable();\r\n            await TimedDisplay(5);\r\n            console.log(GameMove);\r\n            if(GameMove == 1) {\r\n                await TimedDisplay(4);\r\n                break;\r\n            }\r\n        }\r\n        startGame(false);\r\n        disable();\r\n    }\r\n\r\n    //const [isGamepad, setGamepad] = useState(false);\r\n    //if(isGamepad) \r\n    //    return <HomePage/>;\r\n    return (\r\n        <div className='Container'>\r\n            <p className=\"idMarker\">game id: {gameid}</p>\r\n            <button className=\"exitMarker\" onClick={() =>{\r\n                //setGamepad(true);\r\n            }}><p>x</p></button>\r\n            <section className=\"game\">\r\n                {engageGame && <div className=\"buttonholder\"><h2>{gameDisplay}</h2></div>}\r\n                {!engageGame && <div className=\"buttonholder\">\r\n                    <button type=\"button\" onClick={() => {\r\n                        startGame(true);\r\n                        Gameplay();\r\n                    }}        \r\n                    >start game</button>\r\n                </div>}\r\n                <section className=\"ActionButtons\">\r\n                    <button style={sheildStyle} \r\n                        onClick={() => {\r\n                            GameMove = 1;\r\n                            changeB1(NewButtonStyle);\r\n                            changeB2(ButtonStyleEnd);\r\n                            changeB3(ButtonStyleEnd);\r\n                        }}\r\n                        onMouseEnter={() => {\r\n                            if(sheildStyle.backgroundColor !== \"#353434\")\r\n                                changeB1({...sheildStyle, borderColor: \"white\"});\r\n                        }}\r\n                        onMouseLeave={() =>{\r\n                            if(sheildStyle.backgroundColor !== \"#353434\")\r\n                                changeB1({...sheildStyle, borderColor: \"#353434\"});\r\n                        }}\r\n                    >shield</button>\r\n                    <button style={hitStyle} \r\n                        onClick={() => {\r\n                            GameMove = 2;\r\n                            changeB1(ButtonStyleEnd);\r\n                            changeB2(NewButtonStyle);\r\n                            changeB3(ButtonStyleEnd);\r\n                        }}\r\n                        onMouseEnter={() => {\r\n                            if(hitStyle.backgroundColor !== \"#353434\") \r\n                                changeB2({...hitStyle, borderColor: \"white\"});\r\n                        }}\r\n                        onMouseLeave={() =>{\r\n                            if(hitStyle.backgroundColor !== \"#353434\") \r\n                                changeB2({...hitStyle, borderColor: \"#353434\"});\r\n                        }}\r\n                    >hit</button>\r\n                    <button style={reloadStyle} \r\n                        onClick={() => {\r\n                            GameMove = 3;\r\n                            changeB1(ButtonStyleEnd);\r\n                            changeB2(ButtonStyleEnd);\r\n                            changeB3(NewButtonStyle);\r\n                        }}\r\n                        onMouseEnter={() => {\r\n                            if(reloadStyle.backgroundColor !== \"#353434\")\r\n                                changeB3({...reloadStyle, borderColor: \"white\"});\r\n\r\n                        }}\r\n                        onMouseLeave={() =>{\r\n                            if(reloadStyle.backgroundColor !== \"#353434\")\r\n                                changeB3({...reloadStyle, borderColor: \"#353434\"});\r\n                        }}\r\n                    >reload</button>\r\n                </section>\r\n            </section>\r\n        </div>\r\n    );\r\n}",{"ruleId":"13","severity":1,"message":"14","line":13,"column":10,"nodeType":"15","messageId":"16","endLine":13,"endColumn":18},{"ruleId":"17","severity":1,"message":"18","line":50,"column":9,"nodeType":"19","messageId":"20","endLine":85,"endColumn":10},{"ruleId":"13","severity":1,"message":"21","line":88,"column":14,"nodeType":"15","messageId":"16","endLine":88,"endColumn":19},{"ruleId":"13","severity":1,"message":"22","line":105,"column":11,"nodeType":"15","messageId":"16","endLine":105,"endColumn":13},{"ruleId":"13","severity":1,"message":"23","line":106,"column":13,"nodeType":"15","messageId":"16","endLine":106,"endColumn":14},{"ruleId":"24","severity":1,"message":"25","line":114,"column":25,"nodeType":"26","messageId":"27","endLine":114,"endColumn":27},"no-unused-vars","'HomePage' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'sleep' is defined but never used.","'ai' is assigned a value but never used.","'i' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]