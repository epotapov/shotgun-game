{"version":3,"sources":["App.js","index.js"],"names":["reloaded","fired","socket","io","App","useState","component","SwitchComp","HomePage","Gamepad","useForm","register","handleSubmit","errorBool","setError","useEffect","on","className","onSubmit","data","emit","id","type","placeholder","required","onClick","ButtonStyle","backgroundColor","borderColor","ButtonStyleEnd","pointerEvents","NewButtonStyle","waiting","gameid","initGameid","engageGame","startText","shieldStyle","changeB1","reloadStyle","changeB2","hitStyle","changeB3","gameDisplay","changeDis","reEnable","disable","message","style","onMouseEnter","onMouseLeave","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c30d72b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState , useEffect } from 'react'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { io } from \"socket.io-client\";\r\n\r\n\r\nvar reloaded = false;\r\nvar fired = false;\r\n\r\nconst socket = io();\r\n\r\nexport default function App() {\r\n    const [component, SwitchComp] = useState(1);\r\n    if(component === 1)\r\n        return <HomePage/>;\r\n    else if(component === 2)\r\n        return <Gamepad/>;\r\n\r\n    \r\n    function HomePage() {\r\n        const {register, handleSubmit} = useForm();\r\n        const [errorBool, setError] = useState(false);\r\n\r\n        useEffect(() => {\r\n            socket.on('display error', () => setError(true));\r\n            socket.on('joinRoomSuccess', () => SwitchComp(2));\r\n        }, []);\r\n\r\n        const onSubmit = data => {\r\n            socket.emit('join game', data['game id']);\r\n        }\r\n\r\n        return (\r\n            <div className='HomeContainer'>\r\n                <section className=\"intro\">\r\n                    <h1>&gt;reload/hit/repeat</h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <section id=\"InputHolder\">\r\n                            <input \r\n                                type=\"text\" \r\n                                placeholder=\"game id\" \r\n                                {...register('game id', { required: true })}\r\n                                />\r\n                        </section>\r\n                        <div className=\"buttonholder\">\r\n                            <button type=\"submit\">\r\n                                join game\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"ErrorMessage\">\r\n                            {errorBool && <p>couldn't connect to game</p>}\r\n                        </div>\r\n                    </form>\r\n                    <p>\r\n                        Rules:\r\n                    </p>\r\n                    <ul>\r\n                        <li>Every five seconds players pick:</li>\r\n                        <ul>\r\n                            <li>Shield</li>\r\n                            <li>Reload</li>\r\n                            <li>Hit (Reload to Pick)</li>\r\n                        </ul>\r\n                        <li>Shield protects against hits</li>\r\n                        <li>Wins are obtained through unguarded hits (Hit a reloading player)</li>\r\n                        <li>Ties are when both hit each other</li>\r\n                    </ul>\r\n                    <div className=\"buttonholder\">\r\n                        <button type=\"button\" onClick={() => {\r\n                            SwitchComp(2);\r\n                            socket.emit('create game');\r\n                        }}>\r\n                            create game\r\n                        </button>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    function Gamepad() { \r\n        const ButtonStyle = {backgroundColor: \"#464545\", borderColor:\"#353434\"};\r\n        const ButtonStyleEnd = {backgroundColor: \"#464545\", borderColor:\"#353434\", pointerEvents:\"none\"};\r\n        const NewButtonStyle = {backgroundColor: \"#353434\", borderColor:\"white\", pointerEvents:\"none\"};\r\n        const waiting = \"waiting for opponent\";\r\n        const [gameid, initGameid] = useState();\r\n        const [engageGame, startText] = useState(false);\r\n        const [shieldStyle, changeB1] = useState(ButtonStyleEnd);\r\n        const [reloadStyle, changeB2] = useState(ButtonStyleEnd);\r\n        const [hitStyle, changeB3] = useState(ButtonStyleEnd);\r\n        const [gameDisplay, changeDis] = useState(waiting);\r\n\r\n        useEffect(() => {\r\n            socket.on('enter game', (id) => {\r\n                initGameid(id);\r\n                startText(true);\r\n            });\r\n\r\n            socket.on('enter player 2', (id) => {\r\n                initGameid(id);\r\n            });\r\n\r\n            socket.on('player 2 leaves', () => {\r\n                startText(true);\r\n                changeDis(waiting);\r\n            });\r\n\r\n            socket.on('full game', () => {\r\n                startText(false);\r\n                changeDis(\"\");\r\n            });\r\n\r\n            socket.on('init game', () => {\r\n                startText(true);\r\n                reloaded = false;\r\n                fired = false;\r\n            });\r\n\r\n            socket.on('enable', () => reEnable());\r\n\r\n            socket.on('disable', () => disable());\r\n\r\n            socket.on('display', (message) => {\r\n                changeDis(message);\r\n            });\r\n        }, []);\r\n\r\n        const reEnable = () => {\r\n            changeB1(ButtonStyle);\r\n            changeB2(ButtonStyle);\r\n            if(fired)\r\n                changeB3(ButtonStyleEnd);\r\n            else if(reloaded)\r\n                changeB3(ButtonStyle);\r\n        }\r\n\r\n        const disable = () => {\r\n            changeB1(ButtonStyleEnd);\r\n            changeB2(ButtonStyleEnd);\r\n            changeB3(ButtonStyleEnd);\r\n        }\r\n\r\n        return (\r\n            <div className='Container'>\r\n                <p className=\"idMarker\">game id: {gameid}</p>\r\n                <button className=\"exitMarker\" onClick={() => {\r\n                    SwitchComp(1);\r\n                    socket.emit('leave game');\r\n                }}>\r\n                    x\r\n                </button>\r\n                <section className=\"game\">\r\n                    {engageGame && <div className=\"buttonholder\"><h2>{gameDisplay}</h2></div>}\r\n                    {!engageGame && <div className=\"buttonholder\">\r\n                        <button type=\"button\" onClick={() => {\r\n                            socket.emit('start game', gameid);\r\n                        }}        \r\n                        >start game</button>\r\n                    </div>}\r\n                    <section className=\"ActionButtons\">\r\n                        <button style={shieldStyle} \r\n                            onClick={() => {\r\n                                socket.emit('make move', 1);\r\n                                changeB1(NewButtonStyle);\r\n                                changeB2(ButtonStyleEnd);\r\n                                changeB3(ButtonStyleEnd);\r\n                            }}\r\n                            onMouseEnter={() => {\r\n                                if(shieldStyle.backgroundColor !== \"#353434\")\r\n                                    changeB1({...shieldStyle, borderColor: \"white\"});\r\n                            }}\r\n                            onMouseLeave={() =>{\r\n                                if(shieldStyle.backgroundColor !== \"#353434\")\r\n                                    changeB1({...shieldStyle, borderColor: \"#353434\"});\r\n                            }}\r\n                        >shield</button>\r\n                        <button style={reloadStyle} \r\n                            onClick={() => {\r\n                                socket.emit('make move', 2);\r\n                                changeB1(ButtonStyleEnd);\r\n                                changeB2(NewButtonStyle);\r\n                                changeB3(ButtonStyleEnd);\r\n                                reloaded = true;\r\n                                fired = false;\r\n                            }}\r\n                            onMouseEnter={() => {\r\n                                if(reloadStyle.backgroundColor !== \"#353434\")\r\n                                    changeB2({...reloadStyle, borderColor: \"white\"});\r\n\r\n                            }}\r\n                            onMouseLeave={() =>{\r\n                                if(reloadStyle.backgroundColor !== \"#353434\")\r\n                                    changeB2({...reloadStyle, borderColor: \"#353434\"});\r\n                            }}\r\n                        >reload</button>\r\n                        <button style={hitStyle} \r\n                            onClick={() => {\r\n                                socket.emit('make move', 3);\r\n                                changeB1(ButtonStyleEnd);\r\n                                changeB2(ButtonStyleEnd);\r\n                                changeB3(NewButtonStyle);\r\n                                reloaded = false;\r\n                                fired = true;\r\n                            }}\r\n                            onMouseEnter={() => {\r\n                                if(hitStyle.backgroundColor !== \"#353434\") \r\n                                    changeB3({...hitStyle, borderColor: \"white\"});\r\n                            }}\r\n                            onMouseLeave={() =>{\r\n                                if(hitStyle.backgroundColor !== \"#353434\") \r\n                                    changeB3({...hitStyle, borderColor: \"#353434\"});\r\n                            }}\r\n                        >hit</button>\r\n                    </section>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>, \r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}